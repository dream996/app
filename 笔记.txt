git:
	环境搭建:
		下载git仓库管理软件并安装
		打开cmd运行窗口,查看版本号git version
	配置:
		git config --global user.name "github仓库名"
		git config --global user.email github注册时使用的邮箱
        注意:每次提交版本到git仓库,必须指定提交人与邮箱地址
    常用命令:
		git init	创建git仓库
		git add filename	将文件添加到暂存区
		git add .	将当前目录下所有文件添加到暂存区
		git commit -m 备注信息	将暂存区文件提交到本地仓库
		git status	查看git现在的状态
		git pull https://github.com/dream996/git.git	获取最新的代码
		git push origin master	将本地仓库推送到github上
		git clone	克隆
		git log		查看日志
		git reset --hard 日志编码
	将本地创库推送到github上:
		本地项目还不是git仓库时,将本地项目推送到github上整个仓库
			git init
			git add .
			git remote add origin https://github.com/dream996/app.git	本地创库与github绑定
				绑定成功时,.git目录下有个config配置文件可以看到增加的url
			git push origin master	将本地仓库推送到github上	
		如果项目已是仓库,并且已经绑定远端仓库
			git add .
			git commit -m "备注信息"
			git push origin master	将本地仓库推送到github上
	冲突:
		原因:
			团队多人开发修改同一文件,并且是同一行,在push的时候,提示必须先pull,拉取服务器最新的代码,冲突就产生了
			HEAD部分是自己的代码 ===分隔的是别人的代码
		解决:
			经过友好协商,删除多余代码,保留一份,重新提交即可

adb常用命令:
	adb start-server	开启服务
	adb kill-server		杀死服务
	adb devices		查看设备号
	adb shell getprop ro.build.version.release	获取设备系统号
	adb push pc端文件路径 /sdcard
	adb pull 手机端文件路径 保存到pc端的文件路径
	adb logcat	查看手机日志
	adb shell dumpsys window windows | findstr usedApp	查看启动的包名
	adb install -r 包名		覆盖安装apk
	adb uninstall 包名	卸载应用
	adb shell am start -W 包名/启动名	查看应用启动时间
		TotalTime：app自身启动时间
		
toast提示框

app:
	desired_caps["udid"]=设备号		指定设备号
	desired_caps['noReset']=True	不重置应用
	desired_caps['app']="apk绝对路径"	通过启动参数安装APK文件
		注意:参数安装时,不能有包名启动名存在
	driver.install_app(app_path) app_path：脚本机器中APK文件路径
	driver.is_app_installed(bundle_id) bundle_id: 可以传入app包名,返回结果为True(已安装) / False(未安装)
	driver.remove_app(app_id) app_id：需要卸载的app包名
	

pytest:
	类级别:
		setup_class		前置准备
		teardown_class	后置处理
		一个类开始结束都只执行一次
	函数级别:
		setup		前置准备
		teardown	后置处理
		有几个函数就执行几次
unittest:
	类级别:
		@Classmethod	修饰类方法
		setUpClass()	前置准备
		tearDownClass	后置处理
		类上面一定要有修饰 一个类开始结束都只执行一次
	函数级别:
		setUp		前置准备
		tearDown	后置处理
		有几个函数就执行几次
		
html报告:
	pytest.ini文件	addopts=-s --html=指定目录
	
ordering执行顺序:
	pip install pytest-ordering
	标记被测函数 @pytest.mark.run(order=x)
	值全为正数或为负数时,值越小,有先级越高
	正数负数同时存在,正数优先级高
	
rerunfailures失败重试
	pytest.ini文件	addopts=-s --html=指定目录 --reruns 重试次数
	
fixture工厂函数:
	1.通过参数传递@pytest.fixture(),先修饰一个函数,然后把函数名作为参数放到另一个函数里面,修饰的函数就先执行
	2.放到函数上面 @pytest.mark.usefixtures("方法名")   函数之前之前会执行工厂函数
		放到类上面 @pytest.mark.usefixtures("方法名")   类里面的函数之前会执行工厂函数
	3.变成类函数  类似setup函数@pytest.fixture(scope="class",autouse=True)
		注意: 当修饰成类方法时,前面修饰语句都要加上
				当后面有autouse=True时,前面两个修饰语句就可以省略
	返回值:
		@pytest.fixture(params=[只能是列表])
		def before(request)
		return request.param
		
skipif跳过函数:
	@pytest.mark.skipif(条件,reason="跳过原因")
	或者 @pytest.mark.skipif(函数名(self=函数名)==值,reason="跳过原因")
	
parametrize参数化:
	@pytest.mark.parametrize("name",["zhangsan"])
	def 函数名(self,name)
	参数名:
		单个参数名:name 使用字符串 如:"name"
		多个参数名:name,password 使用一个字符串 如:"name,password"
	参数值:
		单个参数值和多个参数值,值都为列表 
		多个参数值,值得类型为列表嵌套元祖 如:[(zhangsan,123),(lisi,321)]
	注意:设置的参数引用名称,必须和函数内使用参数名相同
	
断言:
	assert 2==2
	assert "ha" in "hello"
	assert True
	
统一入口类:
	1.创建一个page_in.py文件
	2.定义一个类,然后定义很多个页面对象
	# 统一入口类
	class PageIn():
		# 获取driver
		def __init__(self):
			self.driver=get_driver()

		# 获取分类页面方法
		def page_fenlei(self):
			return PageFenlei(self.driver)

		# 获取登录页面方法
		def page_login(self):
			return PageLogin(self.driver)
			
yaml文件存储:
	写法:键名: 键值
	口诀:值为字典或列表,空格+换行+缩进
	参数化:
		问题:
			1.读取出来的数据格式为字典
			2.有3组数据,3个字典
		解决:
			1.新建空列表,将读取的数据放到空列表
			2.使用字典values方法,获取键值
	def read_yaml():
		list=[]
		filename="./bainianaolai/data/data.yaml"
		with open(filename, "r",encoding="utf-8") as f:
			data = yaml.load(f)
			for i in data.values():
				list.append((i.get("username"),i.get("pwd")))
			return list
			
allure报告:
	1.安装:
		pip install pytest-allure-adaptor==1.7.10
	2.应用:
		1.配置参数:	
			pytest.ini文件	addopts=-s --alluredir report
		2.将生成xml文件壮汉为html文件:
			1.解压allure2.6.zip工具，并将 allure.bat文件所在目录添加到path环境变量中 如：d:\allure-2.6\bin
			2.执行转换命令： allure generate report / -o report/html --clean
				参数:
					allure: 运行allure.bat 
					generate: 关键字(allure.bat内的关键字) 生成
					report: 在report查找 xml文件
					-o: 参数-输出文件
					report/hmtl：文件保存的目录 ，在report目录下生成一个html目录保存文件
					--clean: 如果html文件已存在，先清除原有文件在生成
	3.报告增强:
		1.测试标题:
			@allure.step("报告标题内容")---写在测试函数上面
		2.测试步骤:
			allure.attach("步骤过程","")---写在函数里面里面,两个空不能省略,可以为none
		3.失败截图写入报告:
			allure.attach("失败原因：",f.read(), allure.attach_type.PNG/JPG) ---("描述",图片流,图片类型)
				如:
					with open("路径"."rb") as f:
						allure.attach("失败原因: ",f.read(),allure.attch_type.PNG)
		4.严重级别:
			1.@pytest.allure.severity(pytest.allure.severity_level.BLOCKER)---官方写法
			2.@allure.severity("级别") ---扩展写法
			Severity：严重级别(BLOCKER,CRITICAL,NORMAL,MINOR,TRIVIAL)---级别越来越低
				级别:
					1.blocker：有妨碍的
					2.critical：紧要的
					3.normal：一般
					4.minor：次要
					5.trivial：不重要
			提示：
				1. 修饰用例的优先级,只能修饰测试函数;
					
jenkins持续集成:
	1.安装配置
		安装:
			war包:java -jar jenkins.war (必须cmd进入jenkins包目录才行)
		配置:
			将jenkins.zip文件解压到硬盘根目录下
		应用:
			1.执行jenkins服务	java -jar jenkins.war
			2.浏览器运行:localhost:8080
	2.数据准备:
		项目:
			将项目push到github上
		操作:
			1. 将代码单独复制出来，共享到github上
			2. 获取github地址：https://github.com/dream996/app.git
			3. 学习Jenkins使用项目：https://github.com/LGY2008/back02-001.git
	3.持续集成搭建
		环境:
			依赖于jenkins服务器所在的项目环境必须都启动
		搭建:
			效果:
				手动点击构建可以自动运行自动化脚本(暂时没有报告)
			步骤:
				1.General
					1.项目名称:随便写,便于识别
					2.选择:做一个自由风格项目
					3.github project:项目所在github创库地址
				2.源码管理:
					1.git:
						Repository URL:输入项目github创库地址
						add-->jenkins:
							github username:github邮箱
							github password:github密码
							点击add
				3.构建:
					1.选择:Execute Windows batch command:
						PATH=$PATH;pytest.exe所在电脑的目录路径  # 说明：将pytest.exe添加到系统Path变量内
						pytest # 说明：执行命令
						比如:
							PATH=$PATH;C:\Users\Administrator\AppData\Local\Programs\Python\Python36-32\Scripts
							(将pytest.exe文件所在目录添加到系统PATH变量中)
							pytest(执行命令)
					2.点击应用,保存
				4.添加allure报告:
					1.安装:
						1.安装allure插件:
							左上角jenkins菜单---系统管理---管理插件---可选插件搜索allure---点击安装
						2.安装将xml文件转换为html工具:
							左上角jenkins菜单---系统管理---全局工具配置---Allure Commandline---
							输入一个名称(输入：allure 2.6),勾选自动安装---选择插件版本(注意：python3.6 必须选择2.6以下版本)
					2.配置:
						新增构建后操作---allure Report---Path:report(注意：一定要写xml所在文件的目录名称，否则生成报告无数据)
				5.自动构建:
					1.语法:
						* * * * *
						分(0~59) 时(0~23) 天(1-31) 月(1-2) 周(0-7) 0和7为礼拜天
					2.代码发生改变自动构建:
						构建触发器---Poll SCM:
							如:每分钟检测此github是否有变化 */1 * * * *
					3.指定时长或者指定时间构建
						构建触发器-->Build periodically
							如：每分钟执行构建 */1 * * * *
	4.运行:
		回到主页面,选择新建的项目工程,点击立即构建
	5.邮件设置:
		1.数据准备
			1.注册163邮箱
			2.设置授权码---菜单(设置)---右侧标题栏（客户端授权密码）---启用---输入手机号--设置授权码
			3.复制SMTP服务器地址：smtp.163.com（POP3/SMTP/IMAP-->SMTP服务器地址）
			注意：在jenkins中有关邮箱密码，全部为：授权码
		2.配置 管理员邮箱
			1.配置 邮件系统用户：
				系统管理---系统设置---Jenkins Location
				系统管理员邮件地址：用户名@163.com(发送邮件用户)
			2.配置 系统邮件:
				系统管理---系统设置---邮件通知
				SMTP服务器：例 smtp.163.com
				用户默认邮件后缀：例如 @163.com
				高级-使用SMTP认证
				输入发送邮箱和密码(客户端授权码) ---可以使用测试邮件验证
		3.配置 发件人:
			系统管理-系统设置-Extended E-mail Notification
			SMTP server：例 smtp.163.com
			Default user E-mail suffix：例如 @163.com
			高级---Use SMTP Authentication --- 输入发送邮件的邮箱和密码
			Default Content Type: HTML(text/html)
			Default Content(报告模版,使用以下html代码即可):
				   <hr/>(本邮件是程序自动下发的，请勿回复！)<hr/>
					项目名称：$PROJECT_NAME<br/><hr/>
					构建编号：$BUILD_NUMBER<br/><hr/>
					git版本号：${GIT_REVISION}<br/><hr/>
					构建状态：$BUILD_STATUS<br/><hr/>
					触发原因：${CAUSE}<br/><hr/>
					目录：${ITEM_ROOTDIR}<br/><hr/>
					构建日志地址：<a href=" ">${BUILD_URL}console</a ><br/><hr/>
					构建地址：<a href="$BUILD_URL">$BUILD_URL</a ><br/><hr/>
					报告地址：<a href="${BUILD_URL}allure">${BUILD_URL}allure</a ><br/><hr/>
					失败数：${FAILED_TESTS}<br/><hr/>
					成功数：${FAILED_TESTS}<br/><hr/>
					变更集：${JELLY_SCRIPT,template="html"}<br/><hr/>
		4) 配置 收件人
			1. 选择构建后操作---Extended Email Notification
			2. Advanced Setting---Triggers(Always 一直发送了，无论执行成功与失败都发送)
				(注意：默认只有失败才发送 Failure Any)
			3. Recipient List---点击中文高级(在 Recipient List中：输入收件人 ，多个收件人使用逗号分隔；)